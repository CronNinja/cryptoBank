{"version":3,"sources":["js/Transactor.jsx","js/Account.jsx","App.js","reportWebVitals.js","index.js"],"names":["Transactor","onChange","isDeposit","validTransaction","console","log","Number","id","type","style","width","min","value","disabled","Currency","currencyType","React","useState","deposit","setDeposit","totalState","setTotalState","setIsDeposit","atmMode","setAtmMode","setValidTransaction","usdValue","results","setData","setIsError","url","setIsLoading","useEffect","a","axios","result","data","fetchData","status","Card","Body","onSubmit","event","preventDefault","Title","Subtitle","Text","e","selectedValue","target","handleModeSelect","name","returnValue","App","Jumbotron","fluid","Container","CardDeck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ab29f60.chunk.js","sourcesContent":["const Transactor = ({ onChange, isDeposit, validTransaction }) => {\n  const choice = ['Deposit', 'Withdraw'];\n  console.log(`ATM isDeposit: ${isDeposit}`);\n  return (\n    <>\n    <label>\n      {choice[Number(!isDeposit)]}:\n      <input id=\"number-input\" type=\"number\" onChange={onChange} style={{ width: '5rem' }} min=\"0\"></input>\n    </label>\n    <hr />\n    <input type=\"submit\" value=\"Submit\" id=\"submit-input\" disabled={!validTransaction}></input>\n    </>\n  );\n};\n\nexport default Transactor","import React from 'react';\nimport Transactor from './Transactor';\nimport Card from 'react-bootstrap/Card';\nimport axios from 'axios';\n\n\nconst Currency = ({currencyType}) => {\n  const [deposit, setDeposit] = React.useState(0);\n  const [totalState, setTotalState] = React.useState(0);\n  const [isDeposit, setIsDeposit] = React.useState(true);\n  const [atmMode, setAtmMode] = React.useState(\"\");\n  const [validTransaction, setValidTransaction] = React.useState(false);\n  const [usdValue, setUsdValue] = React.useState(0);\n\n  const [data, setData] = React.useState({ results: [] });\n\tconst [isError, setIsError] = React.useState(false);\n\tconst [url, setUrl] = React.useState(\n\t\t`https://coincodex.com/api/coincodex/get_coin/${currencyType}`\n\t);\n\tconst [isLoading, setIsLoading] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tsetIsLoading(true);\n\t\t\ttry {\n\t\t\t\tconst result = await axios(url);\n\t\t\t\tsetData(result.data);\n        console.log(result.data);\n\t\t\t} catch (error) {\n\t\t\t\tsetIsError(true);\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t};\n\n\t\tfetchData();\n\t}, [url]);\n\n\n  let status = `${currencyType} Balance: ${totalState} `;\n  const handleChange = (event) => {\n    const returnValue = event.target.value;\n    console.log(`handleChange ${returnValue}`);\n    setDeposit(Number(returnValue));\n    if(returnValue <= 0){\n      setValidTransaction(false);\n      return;\n    }\n    else if(atmMode === \"Withdraw\" && returnValue > totalState) {\n      setValidTransaction(false);\n      return;\n    }\n    else {\n      setValidTransaction(true);\n      return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    let newTotal = isDeposit ? totalState + deposit : totalState - deposit;\n    setTotalState(newTotal);\n    setValidTransaction(false);\n    event.preventDefault();\n  };\n\n  const handleModeSelect = (event) => {\n    const selectedValue = event.target.value;\n    setAtmMode(selectedValue);\n    if(selectedValue === \"Deposit\"){\n      setIsDeposit(true);\n    } else if (selectedValue === \"Withdraw\"){\n      setIsDeposit(false);\n    }\n  }\n\n  return (\n    <Card>\n      <Card.Body>\n        <form onSubmit={handleSubmit}>\n        <Card.Title id=\"total\">{status}</Card.Title>\n        <Card.Subtitle>\n          <label>USD Value: ${usdValue}</label>\n        </Card.Subtitle>\n        <Card.Text>\n          <label>Action:</label>\n          <select onChange={(e) => handleModeSelect(e)} name=\"mode\" id=\"mode-select\">\n            <option id=\"no-selection\" value=\"\"></option>\n            <option id=\"deposit-selection\" value=\"Deposit\">Deposit</option>\n            <option id=\"withdraw-selection\" value=\"Withdraw\">Withdraw</option>\n          </select>\n          { atmMode &&\n          <>\n            <Transactor onChange={handleChange} isDeposit={isDeposit} validTransaction={validTransaction}></Transactor>\n            </>\n          }\n        </Card.Text>\n      </form>\n      </Card.Body>\n    </Card>\n    \n  );\n};\n\nexport default Currency","import Currency from './js/Account'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\n\n\n\nconst App = () => (\n  \n  <div>\n  <Jumbotron fluid>\n    <Container>\n      <h1>Crypto Bank</h1>\n      <p>\n        Welcome back, please enjoy that the features we have to offer to managing your profolio!\n      </p>\n    </Container>\n</Jumbotron>\n<Container>\n  <CardDeck>\n    <Currency currencyType=\"USD\" id=\"Currency-USD\"/>\n    <Currency currencyType=\"BTC\" id=\"Currency-BTC\"/>\n    <Currency currencyType=\"ETH\" id=\"Currency-ETH\"/>\n    <Currency currencyType=\"XRP\" id=\"Currency-XRP\"/>\n  </CardDeck>\n</Container>\n    \n  </div>\n);\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}