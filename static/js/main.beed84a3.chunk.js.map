{"version":3,"sources":["js/Transactor.jsx","api/data.jsx","js/USDValue.jsx","js/Account.jsx","App.js","reportWebVitals.js","index.js"],"names":["Transactor","onChange","isDeposit","validTransaction","currency","Number","id","type","step","style","width","min","value","disabled","axios","create","baseURL","USDValue","state","data","a","API","this","props","crypto","response","setState","parseFloat","last_price_usd","toFixed","total","Component","Currency","currencyType","React","useState","deposit","setDeposit","totalState","setTotalState","setIsDeposit","atmMode","setAtmMode","setValidTransaction","status","Card","Body","onSubmit","event","preventDefault","Title","Subtitle","Text","e","selectedValue","target","handleModeSelect","name","returnValue","App","Jumbotron","fluid","Container","CardDeck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.beed84a3.chunk.js","sourcesContent":["const Transactor = ({ onChange, isDeposit, validTransaction, currency }) => {\n  const choice = ['Deposit', 'Withdraw'];\n  return (\n    <>\n    <label>\n      {choice[Number(!isDeposit)]}:\n      <input id=\"number-input\" type=\"number\" step=\"any\" onChange={onChange} style={{ width: '5rem' }} min=\"0\"></input>\n    </label>\n    <hr />\n    <input type=\"submit\" value=\"Submit\" id=\"submit-input\" disabled={!validTransaction}></input>\n    </>\n  );\n};\n\nexport default Transactor","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `/get_coin/`\n});","import API from '../api/data'\nimport React, {Component} from 'react'\n\nexport default class USDValue extends Component {\n  constructor(){\n    super();\n    this.state = { \n      data: []}\n  }\n  async componentDidMount() {\n    const response = await API(this.props.crypto);\n    this.setState({ data: response.data });\n  }\n  render() {\n    return (\n      <>\n        { parseFloat(this.state.data.last_price_usd).toFixed(4) * this.props.total}\n      </>\n    )\n  }\n}","import React from 'react';\nimport Transactor from './Transactor';\nimport Card from 'react-bootstrap/Card';\nimport USDValue from './USDValue';\n\nconst Currency = ({currencyType}) => {\n  const [deposit, setDeposit] = React.useState(0);\n  const [totalState, setTotalState] = React.useState(0);\n  const [isDeposit, setIsDeposit] = React.useState(true);\n  const [atmMode, setAtmMode] = React.useState(\"\");\n  const [validTransaction, setValidTransaction] = React.useState(false);\n\n  let status = `${currencyType} Balance: ${totalState} `;\n  const handleChange = (event) => {\n    const returnValue = event.target.value;\n    setDeposit(Number(returnValue));\n    if(returnValue <= 0){\n      setValidTransaction(false);\n      return;\n    }\n    else if(atmMode === \"Withdraw\" && returnValue > totalState) {\n      setValidTransaction(false);\n      return;\n    }\n    else {\n      setValidTransaction(true);\n      return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    let newTotal = isDeposit ? totalState + deposit : totalState - deposit;\n    setTotalState(newTotal);\n    setValidTransaction(false);\n    event.preventDefault();\n  };\n\n  const handleModeSelect = (event) => {\n    const selectedValue = event.target.value;\n    setAtmMode(selectedValue);\n    if(selectedValue === \"Deposit\"){\n      setIsDeposit(true);\n    } else if (selectedValue === \"Withdraw\"){\n      setIsDeposit(false);\n    }\n  }\n\n  return (\n    <Card>\n      <Card.Body>\n        <form onSubmit={handleSubmit}>\n        <Card.Title id=\"total\">{status}</Card.Title>\n        <Card.Subtitle>\n          <label>USD Value: $<USDValue crypto={currencyType} total={totalState}/></label>\n        </Card.Subtitle>\n        <Card.Text>\n          <label>Action:</label>\n          <select onChange={(e) => handleModeSelect(e)} name=\"mode\" id=\"mode-select\">\n            <option id=\"no-selection\" value=\"\"></option>\n            <option id=\"deposit-selection\" value=\"Deposit\">Deposit</option>\n            <option id=\"withdraw-selection\" value=\"Withdraw\">Withdraw</option>\n          </select>\n          { atmMode &&\n          <>\n            <Transactor onChange={handleChange} isDeposit={isDeposit} validTransaction={validTransaction}></Transactor>\n            </>\n          }\n        </Card.Text>\n      </form>\n      </Card.Body>\n    </Card>\n    \n  );\n};\n\nexport default Currency","import Currency from './js/Account'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\nconst App = () => (\n  \n  <div>\n  <Jumbotron fluid>\n    <Container>\n      <h1>Crypto Bank</h1>\n      <p>\n        Welcome back, please enjoy that the features we have to offer to managing your profolio!\n      </p>\n    </Container>\n</Jumbotron>\n<Container>\n  <CardDeck>\n    <Currency currencyType=\"USD\" id=\"Currency-USD\"/>\n    <Currency currencyType=\"BTC\" id=\"Currency-BTC\"/>\n    <Currency currencyType=\"ETH\" id=\"Currency-ETH\"/>\n    <Currency currencyType=\"XRP\" id=\"Currency-XRP\"/>\n  </CardDeck>\n</Container>\n    \n  </div>\n);\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}